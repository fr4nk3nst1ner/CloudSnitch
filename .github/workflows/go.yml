name: Go Build and Test

on:
  push:
    tags:
      - 'v*' # Run on any tag that starts with 'v'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Build Release Binary
      run: |
        GOOS=linux GOARCH=amd64 go build -o CloudSnitch-linux-amd64
        GOOS=darwin GOARCH=amd64 go build -o CloudSnitch-darwin-amd64
        GOOS=windows GOARCH=amd64 go build -o CloudSnitch-windows-amd64.exe

    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./CloudSnitch-linux-amd64
        asset_name: CloudSnitch-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload macOS Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./CloudSnitch-darwin-amd64
        asset_name: CloudSnitch-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./CloudSnitch-windows-amd64.exe
        asset_name: CloudSnitch-windows-amd64.exe
        asset_content_type: application/octet-stream
